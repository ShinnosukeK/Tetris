#pragma once

enum class BlockType {
	None,
	Z,
	L,
	O,
	S,
	I,
	J,
	T,
	Black,
	Ojama,
	Background,
	Wall,
};

struct Pos {
	int x;
	int y;
};

class Mino {
public:
	//ミノの種類
	BlockType minoType;

	//ミノの形（7種類，4状態)：絵としての見た目は正しいが，行列としては転置している
	int reversedShape[7][4][4][4] = {

		//Zミノ
		{
			{
				{0,0,0,0,},
				{0,0,0,0,},
				{0,1,1,0,},
				{0,0,1,1,},
			},

			{
				{0,0,0,0,},
				{0,0,0,1,},
				{0,0,1,1,},
				{0,0,1,0,},
			},
			{
				{0,0,0,0,},
				{0,1,1,0,},
				{0,0,1,1,},
				{0,0,0,0,},
			},
			{
				{0,0,0,0,},
				{0,0,1,0,},
				{0,1,1,0,},
				{0,1,0,0,},
			},
		},

		//Lミノ
		{
			{
				{0,0,0,0,},
				{0,0,2,0,},
				{0,0,2,0,},
				{0,0,2,2,},
			},
			{
				{0,0,0,0,},
				{0,0,0,0,},
				{0,0,0,2,},
				{0,2,2,2,},
			},
			{
				{0,0,0,0,},
				{0,0,2,2,},
				{0,0,0,2,},
				{0,0,0,2,},
			},
			{
				{0,0,0,0,},
				{0,0,0,0,},
				{0,2,2,2,},
				{0,2,0,0,},
			},
		},

		//Oミノ
		{
			{
				{0,0,0,0,},
				{0,3,3,0,},
				{0,3,3,0,},
				{0,0,0,0,},
			},
			{
				{0,0,0,0,},
				{0,3,3,0,},
				{0,3,3,0,},
				{0,0,0,0,},
			},
			{
				{0,0,0,0,},
				{0,3,3,0,},
				{0,3,3,0,},
				{0,0,0,0,},
			},
			{
				{0,0,0,0,},
				{0,3,3,0,},
				{0,3,3,0,},
				{0,0,0,0,},
			},
		},

		//Sミノ
		{
			{
				{0,0,0,0,},
				{0,0,0,0,},
				{0,0,4,4,},
				{0,4,4,0,},
			},
			{
				{0,0,0,0,},
				{0,0,4,0,},
				{0,0,4,4,},
				{0,0,0,4,},
			},
			{
				{0,0,0,0,},
				{0,0,4,4,},
				{0,4,4,0,},
				{0,0,0,0,},
			},
			{
				{0,0,0,0,},
				{0,4,0,0,},
				{0,4,4,0,},
				{0,0,4,0,},
			},
		},

		//Iミノ
		{
			{
				{0,0,5,0,},
				{0,0,5,0,},
				{0,0,5,0,},
				{0,0,5,0,},
			},
			{
				{0,0,0,0,},
				{5,5,5,5},
				{0,0,0,0,},
				{0,0,0,0,},
			},
			{
				{0,0,0,0,},
				{5,5,5,5,},
				{0,0,0,0,},
				{0,0,0,0,},
			},
			{
				{0,0,5,0,},
				{0,0,5,0,},
				{0,0,5,0,},
				{0,0,5,0,},				
			},
			
		},

		//Jミノ
		{
			{
				{0,0,0,0,},
				{0,0,0,6,},
				{0,0,0,6,},
				{0,0,6,6,},
			},
			{
				{0,0,0,0,},
				{0,0,0,0,},
				{0,6,6,6,},
				{0,0,0,6,},
			},
			{
				{0,0,0,0,},
				{0,0,6,6,},
				{0,0,6,0,},
				{0,0,6,0,},
			},
			{
				{0,0,0,0,},
				{0,0,0,0,},
				{0,6,0,0,},
				{0,6,6,6,},
			},
		},

		//Tミノ
		{
			{
				{0,0,0,0,},
				{0,0,7,0,},
				{0,7,7,7,},
				{0,0,0,0,},
			},
			{
				{0,0,0,0,},
				{0,0,7,0,},
				{0,7,7,0,},
				{0,0,7,0,},
			},
			{
				{0,0,0,0,},
				{0,0,0,0,},
				{0,7,7,7,},
				{0,0,7,0,},
			},
			{
				{0,0,0,0,},
				{0,0,7,0,},
				{0,0,7,7,},
				{0,0,7,0,},
			},
		},
	};
	
	//ミノの形（7種類，4状態）：reversedShape[*][*][4][4]を転置したもの
	int shape[7][4][4][4];

	//ミノの中心を表すワールド座標（方向キーで変化するが，回転では変化しない）
	Pos centerPos = {
		4,3,
	};

	//ミノを構成するblockたちのワールド座標（方向キーでも回転でも変化する）
	Pos worldPos[4] = {
		{0,0,},
		{0,0,},
		{0,0,},
		{0,0,},
	};

	//ミノを構成するblockたちのローカル座標（方向キーでは変化しないが，回転で変化する）
	Pos localPos[4] = {
		{0,0,},
		{0,0,},
		{0,0,},
		{0,0,},
	};

	//ミノのワールド座標を初期化する
	void InitMino();

	//ミノを構成する4ブロックのローカル座標を更新
	void UpdateLocalBlockPosition();

	//ミノを構成する4ブロックのワールド座標を更新
	void UpdateWorldBlockPosition();

	//ミノを構成する4ブロックのワールド座標のうち，最小のx座標となるものを得る
	Pos GetMinXBlockPosition();

	//ミノを構成する4ブロックのワールド座標のうち，最大のx座標となるものを得る
	Pos GetMaxXBlockPosition();

	//ミノを構成する4ブロックのワールド座標のうち，最大のy座標となるものを得る
	Pos GetMaxYBlockPosition();

	//コンストラクタ
	explicit Mino();
};